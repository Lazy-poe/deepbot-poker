#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  1 18:23:20 2019

@author: cyril
"""

import sys
sys.path.append('../PyPokerEngine')
sys.path.append('../main_functions')
sys.path.append('../bots')
import os
import pickle
import argparse
from u_generate import gen_decks
from u_formatting import get_full_dict
from pypokerengine.api.game import setup_config, start_poker

from bot_CallBot import CallBot
from bot_PStratBot import PStratBot
from bot_DeepBot import DeepBot
from bot_ManiacBot import ManiacBot
from bot_ConservativeBot import ConservativeBot

if __name__ == '__main__':
    """ #### PARSE ARGUMENTS #### """
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--agent_file', default = '../../data/trained_agents_git/6max_single/gen_250/bots/1/bot_1_flat.pkl', type=str, help='Path to file of a trained agent (in flat format).')
    parser.add_argument('--network', default = '6max_single', type=str, help='Neural network of the agent. [hu_first, hu_second, 6max_single, 6max_full]')
    parser.add_argument('--val_id', default='6max_single_250_', type=str, help='The name of the validation.')
    parser.add_argument('--data_path', default='../../data/analysis_data', type=str, help='Path to analysis data generated by analyse_strategy_data.py')
    parser.add_argument('--nb_games', default=1000, type=int, help='Number of games that will be played.')
    parser.add_argument('--table_ind', default = 0, type = int, help='Indice of the table of opponents to play against. For more details open this file')
    parser.add_argument('--max_hands', default=300, type=int, help='Maximum number of hands played in a tournament. If attained, the agent is considered to have lost.')
    parser.add_argument('--verbose', default=True, type=bool, help='Wether to print information')

    args = parser.parse_args()
    agent_file = args.agent_file
    my_network = args.network
    val_id = args.val_id
    nb_games = args.nb_games
    table_ind = args.table_ind
    data_path = args.data_path
    max_hands = args.max_hands
    verbose = args.verbose

    ref_full_dict = DeepBot(network=my_network).full_dict

    print('## Starting ##')

    if not os.path.exists(data_path+'/'+val_id):
        os.makedirs(data_path+'/'+val_id)
    elif verbose:
        print("[WARNING] Writing files in prexisting directory. Files will be overwritten.")
    if my_network =='6max_single' or my_network=='6max_full':
        for i in range(nb_games):
            with open(agent_file, 'rb') as f:
                deepbot_flat = pickle.load(f)

                deepbot_dict = get_full_dict(all_params = deepbot_flat, ref_full_dict = ref_full_dict)
                deepbot = DeepBot(full_dict = deepbot_dict, network=my_network, validation_mode = "decision_analysis",
                                              val_data_dir =  data_path+'/'+val_id+'/declare_action_state_'+str(table_ind)+'.csv')
            if my_network =='6max_single':
                opp_tables = [[PStratBot, PStratBot, PStratBot, PStratBot, PStratBot]]
                opp_names = ['pstratbot']
            elif my_network=='6max_full':
                opp_tables = [[CallBot, CallBot, CallBot, ConservativeBot, PStratBot],
                  [ConservativeBot, ConservativeBot, ConservativeBot, CallBot, PStratBot],
                  [ManiacBot, ManiacBot, ManiacBot, ConservativeBot, PStratBot],
                  [PStratBot, PStratBot, PStratBot, CallBot, ConservativeBot]]
                opp_names = ['call_bot', 'conservative_bot', 'maniac_bot', 'pstrat_bot']

            ##Take the next position at the table at each game game##
            nb_players_6max = 6
            ini_hero_pos = i%nb_players_6max
            opp_id=1
            config = setup_config(max_round=max_hands, initial_stack=1500, small_blind_amount=10)
            for k in range(ini_hero_pos):
                config.register_player(name='p-'+str(opp_id), algorithm=opp_tables[table_ind][k]())
                opp_id+=1
            config.register_player(name="deepbot", algorithm= deepbot)
            opp_id+=1
            for k in range(ini_hero_pos,nb_players_6max-1):
                config.register_player(name='p-'+str(opp_id), algorithm=opp_tables[table_ind][k]())
                opp_id+=1


            plays_per_blind=90
            blind_structure={0*plays_per_blind:{'ante':0, 'small_blind':10},\
                             1*plays_per_blind:{'ante':0, 'small_blind':15},\
                             2*plays_per_blind:{'ante':0, 'small_blind':25},\
                             3*plays_per_blind:{'ante':0, 'small_blind':50},\
                             4*plays_per_blind:{'ante':0, 'small_blind':100},\
                             5*plays_per_blind:{'ante':25, 'small_blind':100},\
                             6*plays_per_blind:{'ante':25, 'small_blind':200},\
                             7*plays_per_blind:{'ante':50, 'small_blind':300},\
                             8*plays_per_blind:{'ante':50, 'small_blind':400},\
                             9*plays_per_blind:{'ante':75, 'small_blind':600},\
                    }
            config.set_blind_structure(blind_structure)

            game_result, last_two_players, deepbot_rank = start_poker(config, verbose=False, return_last_two =True, return_deepbot_rank = True)
            earning = -1
            deepbot_rank += 1
            if deepbot.round_count==max_hands:
                if verbose: print('Game could not finish in max number of hands')
                earning = -1
            else:
                if "deepbot" in last_two_players:
                    earning=1
                    if game_result['players'][ini_hero_pos]['stack']>0:
                        earning=3
            if verbose:
                print('\nGame nb: '+str(i+1))
                print("Finishing place: "+str(deepbot_rank))
                print("Tokens earned: "+str(earning))
                print('\n')
                print(game_result)
                print(last_two_players)
